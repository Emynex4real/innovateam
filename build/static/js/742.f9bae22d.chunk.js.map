{"version":3,"file":"static/js/742.f9bae22d.chunk.js","mappings":"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","sources":["services/deepseek.service.js","pages/dashboard/course-advisor/index.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass DeepSeekService {\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_DEEPSEEK_API_KEY;\r\n    this.baseURL = 'https://api.deepseek.ai/v1';\r\n    \r\n    if (!this.apiKey) {\r\n      console.error('DeepSeek API key is not configured. Please check your .env file.');\r\n    }\r\n\r\n    this.client = axios.create({\r\n      baseURL: this.baseURL,\r\n      headers: {\r\n        'Authorization': `Bearer ${this.apiKey}`,\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n  }\r\n\r\n  async generateResponse(messages) {\r\n    try {\r\n      if (!this.apiKey) {\r\n        throw new Error('DeepSeek API key is not configured. Please check your .env file.');\r\n      }\r\n\r\n      const response = await this.client.post('/chat/completions', {\r\n        model: 'deepseek-chat-v3',\r\n        messages: messages.map(msg => ({\r\n          role: msg.role,\r\n          content: msg.content\r\n        })),\r\n        temperature: 0.7,\r\n        max_tokens: 1000,\r\n        stream: false,\r\n        top_p: 0.95\r\n      });\r\n\r\n      if (response.data.choices && response.data.choices.length > 0) {\r\n        return response.data.choices[0].message.content;\r\n      } else {\r\n        throw new Error('No response generated from DeepSeek API');\r\n      }\r\n    } catch (error) {\r\n      console.error('DeepSeek API Error:', error);\r\n      \r\n      if (error.response?.status === 401) {\r\n        throw new Error('Authentication error with DeepSeek. Please check the API key.');\r\n      } else if (error.response?.status === 429) {\r\n        throw new Error('Too many requests to DeepSeek. Please try again in a moment.');\r\n      } else if (error.response?.status >= 500) {\r\n        throw new Error('DeepSeek service is currently experiencing issues. Please try again later.');\r\n      }\r\n      \r\n      throw new Error('Failed to generate response: ' + (error.response?.data?.error?.message || error.message));\r\n    }\r\n  }\r\n\r\n  async generateCourseRecommendations(waecGrades, jambScore, interests) {\r\n    const prompt = `Based on the following student information:\r\nWAEC Grades: ${JSON.stringify(waecGrades)}\r\nJAMB Score: ${jambScore}\r\nInterests and Career Goals: ${interests}\r\n\r\nPlease provide detailed course recommendations considering:\r\n1. The student's academic performance\r\n2. Their JAMB score\r\n3. Their stated interests and career goals\r\n4. Potential career paths\r\n5. Universities that offer these courses\r\n\r\nFormat the response in a clear, structured way.`;\r\n\r\n    const messages = [\r\n      { role: 'system', content: 'You are a knowledgeable educational advisor specializing in Nigerian university admissions.' },\r\n      { role: 'user', content: prompt }\r\n    ];\r\n\r\n    return this.generateResponse(messages);\r\n  }\r\n\r\n  async generateQuestions(text) {\r\n    const prompt = `Based on the following text, generate comprehensive study questions that test understanding:\r\n\r\n${text}\r\n\r\nPlease generate:\r\n1. Multiple choice questions\r\n2. Short answer questions\r\n3. Discussion questions\r\n\r\nFormat the questions clearly and include answers where appropriate.`;\r\n\r\n    const messages = [\r\n      { role: 'system', content: 'You are an experienced educator specializing in creating educational assessments.' },\r\n      { role: 'user', content: prompt }\r\n    ];\r\n\r\n    return this.generateResponse(messages);\r\n  }\r\n}\r\n\r\nconst deepseekService = new DeepSeekService();\r\nexport default deepseekService; ","import React, { useState, useRef, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { AiOutlineRobot, AiOutlineSend, AiOutlineUser } from 'react-icons/ai';\r\nimport { useDarkMode } from '../../../contexts/DarkModeContext';\r\nimport { useAuth } from '../../../contexts/AuthContext';\r\nimport deepseekService from '../../../services/deepseek.service';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst CourseAdvisor = () => {\r\n  const { isDarkMode } = useDarkMode();\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    const initializeChat = async () => {\r\n      try {\r\n        setIsTyping(true);\r\n        const initialResponse = await deepseekService.generateResponse([\r\n          { \r\n            role: 'user', \r\n            content: 'Start a friendly conversation with a student seeking university course advice in Nigeria. Introduce yourself and ask about their interests and qualifications.' \r\n          }\r\n        ]);\r\n        setMessages([{ type: 'bot', text: initialResponse }]);\r\n      } catch (error) {\r\n        console.error('Initialization Error:', error);\r\n        let fallbackMessage = \"👋 Hello! I'm your Course Advisor AI. \";\r\n        \r\n        if (error.message.includes('API key')) {\r\n          fallbackMessage += \"I'm currently experiencing some technical difficulties with my connection. Please try refreshing the page or come back in a few minutes.\";\r\n        } else if (error.message.includes('too many requests')) {\r\n          fallbackMessage += \"I'm handling a lot of requests right now. Please try again in a moment.\";\r\n        } else if (error.message.includes('service is currently experiencing issues')) {\r\n          fallbackMessage += \"I'm temporarily unavailable. Please try again later.\";\r\n        } else {\r\n          fallbackMessage += \"I'm here to help you find the perfect university course in Nigeria. Tell me about your interests and qualifications!\";\r\n        }\r\n\r\n        setMessages([{ \r\n          type: 'bot', \r\n          text: fallbackMessage\r\n        }]);\r\n      } finally {\r\n        setIsTyping(false);\r\n      }\r\n    };\r\n\r\n    initializeChat();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    // Add user message\r\n    setMessages(prev => [...prev, { type: 'user', text: inputMessage }]);\r\n    const userMessage = inputMessage;\r\n    setInputMessage('');\r\n    \r\n    try {\r\n      setIsTyping(true);\r\n\r\n      // Get AI response\r\n      const response = await deepseekService.generateResponse([\r\n        { role: 'user', content: userMessage }\r\n      ]);\r\n      \r\n      // Add AI response to messages\r\n      setMessages(prev => [...prev, { type: 'bot', text: response }]);\r\n\r\n    } catch (error) {\r\n      console.error('Chat Error:', error);\r\n      let errorMessage = \"I apologize, but I encountered an error. \";\r\n      \r\n      if (error.message.includes('API key')) {\r\n        errorMessage += \"There seems to be an issue with the API configuration. Please try again later.\";\r\n      } else if (error.message.includes('too many requests')) {\r\n        errorMessage += \"We're experiencing high traffic. Please try again in a moment.\";\r\n      } else if (error.message.includes('service is currently experiencing issues')) {\r\n        errorMessage += \"The service is temporarily unavailable. Please try again later.\";\r\n      } else {\r\n        errorMessage += \"Could you please rephrase your message or try again?\";\r\n      }\r\n\r\n      setMessages(prev => [...prev, { \r\n        type: 'bot', \r\n        text: errorMessage\r\n      }]);\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`min-h-screen p-4 sm:p-6 lg:p-8 transition-colors duration-200 ${\r\n      isDarkMode ? 'bg-dark-bg' : 'bg-gray-50'\r\n    }`}>\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className={`rounded-lg shadow-lg overflow-hidden ${\r\n          isDarkMode ? 'bg-dark-surface border border-dark-border' : 'bg-white'\r\n        }`}>\r\n          {/* Header */}\r\n          <div className={`p-4 ${\r\n            isDarkMode ? 'bg-dark-surface-secondary border-b border-dark-border' : 'bg-green-600'\r\n          }`}>\r\n            <div className=\"flex items-center gap-3\">\r\n              <AiOutlineRobot className={`text-2xl ${isDarkMode ? 'text-green-400' : 'text-white'}`} />\r\n              <h1 className={`text-lg font-semibold ${isDarkMode ? 'text-dark-text-primary' : 'text-white'}`}>\r\n                Course Advisor AI\r\n              </h1>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Chat Messages */}\r\n          <div className=\"h-[600px] overflow-y-auto p-4 space-y-4\">\r\n            {messages.map((message, index) => (\r\n              <motion.div\r\n                key={index}\r\n                initial={{ opacity: 0, y: 10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ duration: 0.3 }}\r\n                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\r\n              >\r\n                <div className={`flex items-start gap-2 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse' : ''}`}>\r\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\r\n                    message.type === 'user' \r\n                      ? isDarkMode ? 'bg-green-600' : 'bg-green-500'\r\n                      : isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\r\n                  }`}>\r\n                    {message.type === 'user' \r\n                      ? <AiOutlineUser className=\"text-white\" />\r\n                      : <AiOutlineRobot className={isDarkMode ? 'text-gray-300' : 'text-gray-600'} />\r\n                    }\r\n                  </div>\r\n                  <div className={`p-3 rounded-lg ${\r\n                    message.type === 'user'\r\n                      ? isDarkMode \r\n                        ? 'bg-green-600 text-white' \r\n                        : 'bg-green-500 text-white'\r\n                      : isDarkMode\r\n                        ? 'bg-dark-surface-secondary text-dark-text-primary border border-dark-border'\r\n                        : 'bg-gray-100 text-gray-800'\r\n                  }`}>\r\n                    <p className=\"whitespace-pre-wrap\">{message.text}</p>\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            ))}\r\n            {isTyping && (\r\n              <motion.div\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                className={`flex items-center gap-2 ${\r\n                  isDarkMode ? 'text-dark-text-secondary' : 'text-gray-500'\r\n                }`}\r\n              >\r\n                <AiOutlineRobot className=\"text-xl\" />\r\n                <div className=\"flex gap-1\">\r\n                  <span className=\"animate-bounce\">.</span>\r\n                  <span className=\"animate-bounce\" style={{ animationDelay: '0.2s' }}>.</span>\r\n                  <span className=\"animate-bounce\" style={{ animationDelay: '0.4s' }}>.</span>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          {/* Input Form */}\r\n          <form onSubmit={handleSubmit} className={`p-4 border-t ${\r\n            isDarkMode ? 'border-dark-border' : 'border-gray-200'\r\n          }`}>\r\n            <div className=\"flex gap-2\">\r\n              <input\r\n                type=\"text\"\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                placeholder=\"Type your message...\"\r\n                className={`flex-1 p-2 rounded-lg border ${\r\n                  isDarkMode \r\n                    ? 'bg-dark-surface-secondary border-dark-border text-dark-text-primary placeholder:text-dark-text-secondary' \r\n                    : 'bg-white border-gray-300 text-gray-900 placeholder:text-gray-500'\r\n                } focus:outline-none focus:ring-2 focus:ring-green-500`}\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                className={`p-2 rounded-lg ${\r\n                  isDarkMode\r\n                    ? 'bg-green-600 hover:bg-green-700 text-white'\r\n                    : 'bg-green-500 hover:bg-green-600 text-white'\r\n                } transition-colors duration-200`}\r\n              >\r\n                <AiOutlineSend className=\"text-xl\" />\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseAdvisor; "],"names":["constructor","this","apiKey","process","REACT_APP_DEEPSEEK_API_KEY","baseURL","console","error","client","axios","create","headers","concat","generateResponse","messages","Error","response","post","model","map","msg","role","content","temperature","max_tokens","stream","top_p","data","choices","length","message","_error$response","_error$response2","_error$response3","_error$response4","_error$response4$data","_error$response4$data2","status","generateCourseRecommendations","waecGrades","jambScore","interests","JSON","stringify","generateQuestions","text","CourseAdvisor","isDarkMode","useDarkMode","setMessages","useState","inputMessage","setInputMessage","isTyping","setIsTyping","messagesEndRef","useRef","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","async","initialResponse","deepseekService","type","fallbackMessage","includes","initializeChat","_jsx","className","children","_jsxs","AiOutlineRobot","index","motion","div","initial","opacity","y","animate","transition","duration","AiOutlineUser","style","animationDelay","ref","onSubmit","e","preventDefault","trim","prev","userMessage","errorMessage","value","onChange","target","placeholder","AiOutlineSend"],"sourceRoot":""}
{"version":3,"file":"static/js/742.dfb77983.chunk.js","mappings":"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","sources":["services/deepseek.service.js","pages/dashboard/course-advisor/index.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass DeepSeekService {\n  constructor() {\n    console.log('Environment variables:', {\n      REACT_APP_DEEPSEEK_API_KEY: process.env.REACT_APP_DEEPSEEK_API_KEY,\n      NODE_ENV: process.env.NODE_ENV\n    });\n    \n    this.apiKey = process.env.REACT_APP_DEEPSEEK_API_KEY;\n    \n    // Use proxy in development, direct URL in production\n    this.baseURL = process.env.NODE_ENV === 'development' \n      ? '/api/deepseek' \n      : 'https://api.deepseek.ai/v1';\n    \n    if (!this.apiKey) {\n      console.error('DeepSeek API key is not configured. Please check your .env file.');\n    }\n\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      timeout: 30000,\n      validateStatus: function (status) {\n        return status >= 200 && status < 500;\n      },\n      // Remove withCredentials since we're using a proxy\n      withCredentials: false\n    });\n\n    this.client.interceptors.request.use(\n      config => {\n        // Add API key to headers for each request\n        config.headers['Authorization'] = `Bearer ${this.apiKey}`;\n        \n        // Log request details\n        console.log('Making API request with key:', this.apiKey);\n        console.log('To URL:', config.url);\n        return config;\n      },\n      error => {\n        console.error('Request error:', error);\n        return Promise.reject(error);\n      }\n    );\n\n    this.client.interceptors.response.use(\n      response => {\n        // Log successful response\n        console.log('Response received:', {\n          status: response.status,\n          headers: response.headers\n        });\n        return response;\n      },\n      error => {\n        console.error('Response error:', error);\n        \n        // Network errors\n        if (!error.response) {\n          if (error.code === 'ECONNABORTED') {\n            throw new Error('Request timed out. Please try again.');\n          }\n          if (error.code === 'ERR_NAME_NOT_RESOLVED') {\n            throw new Error('Could not connect to DeepSeek API. Please check your internet connection and proxy settings.');\n          }\n          if (error.code === 'ERR_NETWORK') {\n            throw new Error('Network error. Please check your internet connection and proxy settings.');\n          }\n          throw new Error('Network error: ' + error.message);\n        }\n\n        // HTTP errors\n        if (error.response.status === 401) {\n          throw new Error('Authentication failed. Please check your API key.');\n        }\n        if (error.response.status === 403) {\n          throw new Error('Access forbidden. Please check your API key permissions.');\n        }\n        if (error.response.status === 429) {\n          throw new Error('Rate limit exceeded. Please try again later.');\n        }\n        if (error.response.status >= 500) {\n          throw new Error('DeepSeek API server error. Please try again later.');\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async generateResponse(messages) {\n    try {\n      if (!this.apiKey) {\n        throw new Error('DeepSeek API key is not configured. Please check your .env file.');\n      }\n\n      // Log the messages being sent\n      console.log('Sending messages to DeepSeek API:', messages);\n\n      const response = await this.client.post('/chat/completions', {\n        model: 'deepseek-chat',\n        messages: messages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        })),\n        temperature: 0.7,\n        max_tokens: 1000,\n        stream: false,\n        top_p: 0.95\n      });\n\n      // Log the response data\n      console.log('Received response from DeepSeek API:', {\n        status: response.status,\n        data: response.data\n      });\n\n      if (!response.data) {\n        throw new Error('No response data received from DeepSeek API');\n      }\n\n      if (!response.data.choices || !response.data.choices.length) {\n        throw new Error('No choices received in DeepSeek API response');\n      }\n\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      console.error('DeepSeek API Error:', error);\n      throw error;\n    }\n  }\n\n  async generateCourseRecommendations(waecGrades, jambScore, interests) {\n    const prompt = `Based on the following student information:\nWAEC Grades: ${JSON.stringify(waecGrades)}\nJAMB Score: ${jambScore}\nInterests and Career Goals: ${interests}\n\nPlease provide detailed course recommendations considering:\n1. The student's academic performance\n2. Their JAMB score\n3. Their stated interests and career goals\n4. Potential career paths\n5. Universities that offer these courses\n\nFormat the response in a clear, structured way.`;\n\n    const messages = [\n      { role: 'system', content: 'You are a knowledgeable educational advisor specializing in Nigerian university admissions.' },\n      { role: 'user', content: prompt }\n    ];\n\n    return this.generateResponse(messages);\n  }\n\n  async generateQuestions(text) {\n    const prompt = `Based on the following text, generate comprehensive study questions that test understanding:\n\n${text}\n\nPlease generate:\n1. Multiple choice questions\n2. Short answer questions\n3. Discussion questions\n\nFormat the questions clearly and include answers where appropriate.`;\n\n    const messages = [\n      { role: 'system', content: 'You are an experienced educator specializing in creating educational assessments.' },\n      { role: 'user', content: prompt }\n    ];\n\n    return this.generateResponse(messages);\n  }\n}\n\nconst deepseekService = new DeepSeekService();\nexport default deepseekService; ","import React, { useState, useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { AiOutlineRobot, AiOutlineSend, AiOutlineUser } from 'react-icons/ai';\nimport { useDarkMode } from '../../../contexts/DarkModeContext';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport deepseekService from '../../../services/deepseek.service';\nimport toast from 'react-hot-toast';\n\nconst CourseAdvisor = () => {\n  const { isDarkMode } = useDarkMode();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const [conversationHistory, setConversationHistory] = useState([]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    const initializeChat = async () => {\n      try {\n        setIsTyping(true);\n        const systemMessage = {\n          role: 'system',\n          content: 'You are a knowledgeable course advisor for Nigerian universities. You help students choose suitable courses based on their interests, qualifications, and career goals. Be friendly, professional, and provide detailed, accurate advice.'\n        };\n        \n        const userMessage = {\n          role: 'user',\n          content: 'Start a friendly conversation with a student seeking university course advice in Nigeria. Introduce yourself and ask about their interests and qualifications.'\n        };\n\n        const initialHistory = [systemMessage, userMessage];\n        const initialResponse = await deepseekService.generateResponse(initialHistory);\n        \n        setConversationHistory(initialHistory);\n        setMessages([{ type: 'bot', text: initialResponse }]);\n      } catch (error) {\n        console.error('Initialization Error:', error);\n        let fallbackMessage = \"👋 Hello! I'm your Course Advisor AI. \";\n        \n        if (error.message.includes('API key')) {\n          fallbackMessage += \"I'm currently experiencing some technical difficulties with my connection. Please try refreshing the page or come back in a few minutes.\";\n        } else if (error.message.includes('too many requests')) {\n          fallbackMessage += \"I'm handling a lot of requests right now. Please try again in a moment.\";\n        } else if (error.message.includes('service is currently experiencing issues')) {\n          fallbackMessage += \"I'm temporarily unavailable. Please try again later.\";\n        } else {\n          fallbackMessage += \"I'm here to help you find the perfect university course in Nigeria. Tell me about your interests and qualifications!\";\n        }\n\n        setMessages([{ \n          type: 'bot', \n          text: fallbackMessage\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    };\n\n    initializeChat();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!inputMessage.trim()) return;\n\n    const userMessage = {\n      role: 'user',\n      content: inputMessage\n    };\n\n    // Add user message to UI\n    setMessages(prev => [...prev, { type: 'user', text: inputMessage }]);\n    setInputMessage('');\n    \n    try {\n      setIsTyping(true);\n\n      // Update conversation history\n      const newHistory = [...conversationHistory, userMessage];\n      \n      // Get AI response\n      const response = await deepseekService.generateResponse(newHistory);\n      \n      // Add AI response to conversation history\n      const assistantMessage = {\n        role: 'assistant',\n        content: response\n      };\n      \n      setConversationHistory([...newHistory, assistantMessage]);\n      \n      // Add AI response to UI messages\n      setMessages(prev => [...prev, { type: 'bot', text: response }]);\n\n    } catch (error) {\n      console.error('Chat Error:', error);\n      let errorMessage = \"I apologize, but I encountered an error. \";\n      \n      if (error.message.includes('API key')) {\n        errorMessage += \"There seems to be an issue with the API configuration. Please try again later.\";\n      } else if (error.message.includes('too many requests')) {\n        errorMessage += \"We're experiencing high traffic. Please try again in a moment.\";\n      } else if (error.message.includes('service is currently experiencing issues')) {\n        errorMessage += \"The service is temporarily unavailable. Please try again later.\";\n      } else {\n        errorMessage += \"Could you please rephrase your message or try again?\";\n      }\n\n      setMessages(prev => [...prev, { \n        type: 'bot', \n        text: errorMessage\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <div className={`min-h-screen p-4 sm:p-6 lg:p-8 transition-colors duration-200 ${\n      isDarkMode ? 'bg-dark-bg' : 'bg-gray-50'\n    }`}>\n      <div className=\"max-w-4xl mx-auto\">\n        <div className={`rounded-lg shadow-lg overflow-hidden ${\n          isDarkMode ? 'bg-dark-surface border border-dark-border' : 'bg-white'\n        }`}>\n          {/* Header */}\n          <div className={`p-4 ${\n            isDarkMode ? 'bg-dark-surface-secondary border-b border-dark-border' : 'bg-green-600'\n          }`}>\n            <div className=\"flex items-center gap-3\">\n              <AiOutlineRobot className={`text-2xl ${isDarkMode ? 'text-green-400' : 'text-white'}`} />\n              <h1 className={`text-lg font-semibold ${isDarkMode ? 'text-dark-text-primary' : 'text-white'}`}>\n                Course Advisor AI\n              </h1>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div className=\"h-[600px] overflow-y-auto p-4 space-y-4\">\n            {messages.map((message, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3 }}\n                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div className={`flex items-start gap-2 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse' : ''}`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                    message.type === 'user' \n                      ? isDarkMode ? 'bg-green-600' : 'bg-green-500'\n                      : isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n                  }`}>\n                    {message.type === 'user' \n                      ? <AiOutlineUser className=\"text-white\" />\n                      : <AiOutlineRobot className={isDarkMode ? 'text-gray-300' : 'text-gray-600'} />\n                    }\n                  </div>\n                  <div className={`p-3 rounded-lg ${\n                    message.type === 'user'\n                      ? isDarkMode \n                        ? 'bg-green-600 text-white' \n                        : 'bg-green-500 text-white'\n                      : isDarkMode\n                        ? 'bg-dark-surface-secondary text-dark-text-primary border border-dark-border'\n                        : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    <p className=\"whitespace-pre-wrap\">{message.text}</p>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n            {isTyping && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className={`flex items-center gap-2 ${\n                  isDarkMode ? 'text-dark-text-secondary' : 'text-gray-500'\n                }`}\n              >\n                <AiOutlineRobot className=\"text-xl\" />\n                <div className=\"flex gap-1\">\n                  <span className=\"animate-bounce\">.</span>\n                  <span className=\"animate-bounce\" style={{ animationDelay: '0.2s' }}>.</span>\n                  <span className=\"animate-bounce\" style={{ animationDelay: '0.4s' }}>.</span>\n                </div>\n              </motion.div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Input Form */}\n          <form onSubmit={handleSubmit} className={`p-4 border-t ${\n            isDarkMode ? 'border-dark-border' : 'border-gray-200'\n          }`}>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                placeholder=\"Type your message...\"\n                className={`flex-1 p-2 rounded-lg border ${\n                  isDarkMode \n                    ? 'bg-dark-surface-secondary border-dark-border text-dark-text-primary placeholder:text-dark-text-secondary'\n                    : 'bg-white border-gray-300 text-gray-900 placeholder:text-gray-500'\n                } focus:outline-none focus:ring-2 focus:ring-green-500`}\n              />\n              <button\n                type=\"submit\"\n                className={`p-2 rounded-lg ${\n                  isDarkMode\n                    ? 'bg-green-600 hover:bg-green-700 text-white'\n                    : 'bg-green-500 hover:bg-green-600 text-white'\n                } transition-colors duration-200`}\n              >\n                <AiOutlineSend className=\"text-xl\" />\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CourseAdvisor;"],"names":["constructor","console","log","REACT_APP_DEEPSEEK_API_KEY","process","NODE_ENV","this","apiKey","baseURL","error","client","axios","create","headers","concat","timeout","validateStatus","status","withCredentials","interceptors","request","use","config","url","Promise","reject","response","code","Error","message","generateResponse","messages","post","model","map","msg","role","content","temperature","max_tokens","stream","top_p","data","choices","length","generateCourseRecommendations","waecGrades","jambScore","interests","JSON","stringify","generateQuestions","text","CourseAdvisor","isDarkMode","useDarkMode","setMessages","useState","inputMessage","setInputMessage","isTyping","setIsTyping","messagesEndRef","useRef","conversationHistory","setConversationHistory","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","async","initialHistory","initialResponse","deepseekService","type","fallbackMessage","includes","initializeChat","_jsx","className","children","_jsxs","AiOutlineRobot","index","motion","div","initial","opacity","y","animate","transition","duration","AiOutlineUser","style","animationDelay","ref","onSubmit","e","preventDefault","trim","userMessage","prev","newHistory","assistantMessage","errorMessage","value","onChange","target","placeholder","AiOutlineSend"],"sourceRoot":""}